import numpy as np
import pandas as pd
import os
import subprocess
import shutil
import re

def sample_discrete_number(new_score):
    # Find which bin the new score belongs to
    bin_idx = np.digitize(new_score, bin_edges)
    # Get the probability distribution for the bin
    probabilities = prob_dist_df.loc[bin_idx].values
    discrete_values = prob_dist_df.columns.values 
    # Sample a discrete number from the distribution
    return np.random.choice(discrete_values, p=probabilities)

# number of grid points are the bins
bin_edges = [70., 108., 146., 184., 222., 260., 298., 336., 374., 412., 450.]

# probabitlity distribution for each bin of pocket volume
prob_dist = np.array([[6.55555556e-01, 1.44444444e-01, 1.00000000e-01, 5.55555556e-02,
        2.22222222e-02, 2.22222222e-02, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
       [2.05128205e-01, 1.53846154e-01, 2.38247863e-01, 1.72008547e-01,
        1.00427350e-01, 4.16666667e-02, 3.84615385e-02, 1.38888889e-02,
        2.45726496e-02, 7.47863248e-03, 1.06837607e-03, 2.13675214e-03,
        1.06837607e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
       [2.65352540e-02, 3.48749052e-02, 4.09401061e-02, 1.09173616e-01,
        1.34192570e-01, 1.10689917e-01, 1.16755118e-01, 9.93176649e-02,
        1.12206217e-01, 8.18802123e-02, 4.92797574e-02, 4.47308567e-02,
        2.19863533e-02, 1.28885519e-02, 1.51630023e-03, 1.51630023e-03,
        1.51630023e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
       [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.80505415e-03,
        3.61010830e-03, 1.26353791e-02, 2.22623345e-02, 5.41516245e-02,
        7.88206980e-02, 9.20577617e-02, 8.42358604e-02, 1.10709988e-01,
        1.78700361e-01, 1.10709988e-01, 8.12274368e-02, 6.61853189e-02,
        2.58724428e-02, 1.86522262e-02, 3.36943442e-02, 1.74488568e-02,
        5.41516245e-03, 1.80505415e-03, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
       [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        5.13874615e-04, 0.00000000e+00, 2.05549846e-03, 1.54162384e-03,
        3.08324769e-03, 5.13874615e-03, 1.90133607e-02, 2.56937307e-02,
        8.06783145e-02, 1.03288798e-01, 9.19835560e-02, 1.41829394e-01,
        1.07913669e-01, 1.18705036e-01, 9.50668037e-02, 9.14696814e-02,
        4.83042138e-02, 1.84994861e-02, 1.43884892e-02, 8.73586845e-03,
        1.74717369e-02, 3.59712230e-03, 5.13874615e-04, 0.00000000e+00,
        5.13874615e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
       [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 3.96375991e-03, 3.39750849e-03,
        1.64212911e-02, 1.58550396e-02, 9.06002265e-03, 2.94450736e-02,
        5.37938845e-02, 1.01925255e-01, 1.27972820e-01, 1.37599094e-01,
        1.57417894e-01, 8.72027180e-02, 7.19139298e-02, 7.53114383e-02,
        5.71913930e-02, 1.98187995e-02, 1.30237826e-02, 1.41562854e-02,
        2.26500566e-03, 1.69875425e-03, 5.66251416e-04, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
       [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 1.60901046e-03, 4.82703138e-03, 6.43604183e-03,
        1.52855994e-02, 8.84955752e-03, 1.93081255e-02, 3.13757039e-02,
        7.96460177e-02, 9.01045857e-02, 1.37570394e-01, 1.39983910e-01,
        1.36765889e-01, 1.30329847e-01, 6.83829445e-02, 4.98793242e-02,
        3.05711987e-02, 2.17216412e-02, 1.04585680e-02, 5.63153660e-03,
        8.04505229e-03, 2.41351569e-03, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 8.04505229e-04, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
       [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 1.57232704e-03, 1.57232704e-03, 0.00000000e+00,
        7.86163522e-03, 1.57232704e-02, 2.67295597e-02, 3.93081761e-02,
        8.17610063e-02, 1.03773585e-01, 1.30503145e-01, 1.21069182e-01,
        1.16352201e-01, 4.71698113e-02, 8.96226415e-02, 4.55974843e-02,
        4.55974843e-02, 5.34591195e-02, 2.51572327e-02, 4.71698113e-03,
        3.77358491e-02, 3.14465409e-03, 0.00000000e+00, 0.00000000e+00,
        1.57232704e-03, 0.00000000e+00, 0.00000000e+00],
       [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        8.88888889e-03, 8.88888889e-03, 0.00000000e+00, 4.44444444e-03,
        4.44444444e-03, 8.88888889e-03, 1.33333333e-02, 3.55555556e-02,
        5.33333333e-02, 8.44444444e-02, 1.11111111e-01, 1.46666667e-01,
        8.44444444e-02, 1.37777778e-01, 8.00000000e-02, 5.33333333e-02,
        1.06666667e-01, 1.77777778e-02, 2.22222222e-02, 8.88888889e-03,
        4.44444444e-03, 0.00000000e+00, 4.44444444e-03],
       [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 9.34579439e-03, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 5.60747664e-02, 1.86915888e-02,
        6.54205607e-02, 2.80373832e-02, 6.54205607e-02, 1.86915888e-01,
        1.02803738e-01, 1.12149533e-01, 1.40186916e-01, 4.67289720e-02,
        1.58878505e-01, 9.34579439e-03, 0.00000000e+00],
       [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 7.69230769e-02, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 5.12820513e-02, 1.79487179e-01,
        2.56410256e-02, 0.00000000e+00, 5.12820513e-02, 5.12820513e-02,
        1.53846154e-01, 7.69230769e-02, 3.33333333e-01],
       [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 1.25000000e-01, 0.00000000e+00,
        0.00000000e+00, 1.25000000e-01, 7.50000000e-01]])

prob_dist_df = pd.DataFrame(prob_dist, index=[0,1,2,3,4,5,6,7,8,9,10,11], columns=np.arange(8,51))

def remove_output_files(output_folder):
    if os.path.exists(output_folder):
        shutil.rmtree(output_folder)

def run_fpocket(input_pdb):
    # Run fpocket
    command = ['fpocket', '-f', input_pdb]
    subprocess.run(command, check=True)

def extract_values(filename):
    with open(filename, 'r') as file:
        content = file.read()
        score = re.search(r'Pocket Score\s*:\s*([-]?\d+\.\d+)', content).group(1)
        drug_score = re.search(r'Drug Score\s*:\s*([-]?\d+\.\d+)', content).group(1)
        volume_mc = re.search(r'Pocket volume \(Monte Carlo\)\s*:\s*([-]?\d+\.\d+)', content).group(1)

        return score, drug_score, volume_mc

def extract_alpha_spheres_coords(pqr_file):
    """
    Extract alpha sphere coordinates from an fpocket .pqr file.

    Args:
    - pqr_file (str): Path to the .pqr file.

    Returns:
    - List[Tuple[float, float, float]]: List of alpha sphere coordinates.
    """
    coordinates = []

    with open(pqr_file, 'r') as file:
        for line in file:
            if line.startswith("ATOM") or line.startswith("HETATM"):
                # Extract x, y, and z coordinates from the line
                x = float(line[30:38].strip())
                y = float(line[38:46].strip())
                z = float(line[46:54].strip())
                coordinates.append((x, y, z))

    return coordinates